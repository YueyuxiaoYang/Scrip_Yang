%% Sum signals with different speed 
% input: transcription start positions(vector), every interval=the index of EspaceInterPolyMin
%        Parameters
%        v_poly vector of poly speed
%        var_speed: variance of different poly speed
%        alpha = 0.5;  parameter to deal with the speed after collision

% output: sum of signals with different speed
%       v_poly: poly_speed according to time  
%       traj_poly trajectory of polymerase

% 

function [Sum_signals_image,v_poly,traj_poly] = sumSignal_diff_speed(Trans_positions,Parameters,var_speed,alpha)
    [FreqEchSimu, FreqEchImg,DureeAnalysee,NbrSondeFluo,ProbeByIntensitie_nb,TaillePreMarq,...
            TailleSeqMarq, TaillePostMarq, Polym_speed,frame_num,num_possible_poly,EspaceInterPolyMin,DureeSimu] = deal(Parameters{:});
    Analyse_length_bp = round(TaillePreMarq+TailleSeqMarq + TaillePostMarq)+ Polym_speed*DureeSimu/FreqEchImg;
    time_step = EspaceInterPolyMin/Polym_speed; % time step, how many (s) it takes to move 1 position(EspaceInterMin)
    tMax = ceil(Analyse_length_bp/Polym_speed);
    Trans_positions = sort(Trans_positions);
    polyNbr = length(Trans_positions);
    traj_poly = zeros(tMax,polyNbr); % traj_poly(i,j): the position(bp) of polymerase j in time i
     % if no speed vector input, speed will be assigned by normal distribution, mean=Polym_speed
%     var_speed = 0.5;
    v_poly = zeros(tMax,polyNbr);
    v_poly(1,:) = max(randn(1,polyNbr)*Polym_speed*var_speed+Polym_speed,0); % speed vector speed can be different
        % v_poly represent that how many position(EspaceInterPolyMin) the
        % polymerase can move in one time step
    
    traj_poly(1,:) = (Trans_positions-1)*EspaceInterPolyMin;
%     alpha = 0.5; % parameter to deal with the speed after collision
    for t = 2:tMax
        traj_poly(t,:) = traj_poly(t-1,:) + v_poly(t-1,:); % the position(bp) of next time interval(s)
        v_poly(t,:) = v_poly(t-1,:);
        for j = 1:polyNbr-1 % the jth polymerase 
            if  traj_poly(t,j+1)-traj_poly(t,j) < EspaceInterPolyMin;
                v_poly(t,j) = alpha*v_poly(t,j) + (1-alpha)*v_poly(t,j+1);
                v_poly(t,j+1) = v_poly(t,j);
            end
        end
    end
    
%     figure(51)
%     hold on 
%     for ii =1:polyNbr
%         plot(traj_poly(1:100,ii),1:100);
%     end
%     figure(52)
%     hold on
%     for ii = 1:5
%         plot(1:100,b(1:100,ii),'r')
%     end
   
    % generate sum signal from traj_poly
    Sum_signals_bp_s = zeros(1,tMax);
    Intensity_for_1_Polym = NbrSondeFluo/ProbeByIntensitie_nb;
    image_start_time = round((TaillePreMarq+TailleSeqMarq + TaillePostMarq)/Polym_speed);
    for j = 1:polyNbr
       a = traj_poly(:,j); 
       poly_start_t = a(1)/Polym_speed;
       length_T1 = length(find((a-a(1)>0)&(a-a(1)<=TaillePreMarq))); % (s)
       length_T2 = length(find((a-a(1)>TaillePreMarq)&(a-a(1)<=TaillePreMarq+TailleSeqMarq)));
       length_T3 = length(find((a-a(1)>TaillePreMarq+TailleSeqMarq)&(a-a(1)<=TaillePreMarq+TailleSeqMarq+TaillePostMarq)));
       t0 = round(a(1)/Polym_speed); % poly start time (s)
       signal_T1 = zeros(1,round(poly_start_t+length_T1));
       signal_T2 = Intensity_for_1_Polym/length_T2:Intensity_for_1_Polym/length_T2:Intensity_for_1_Polym;
       signal_T3 = ones(1,length_T3);
       signal = [signal_T1,signal_T2,signal_T3];
       Sum_signals_bp_s(1:length(signal)) = Sum_signals_bp_s(1:length(signal))+signal;
    end
    Sum_signals_image = Sum_signals_bp_s(image_start_time:end);
    Sum_signals_image = Sum_signals_image(1:3:1200); % sample as image
end